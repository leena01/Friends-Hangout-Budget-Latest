{"ast":null,"code":"var _jsxFileName = \"/home/bahl/react FriendsHangout app/hangout-budget-app/src/component/GroupOptions/GroupPage.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport StickyNote from '../StickyNote/StickyNote';\nimport { AuthContext } from './AuthContext.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GroupPage(props) {\n  _s();\n  // Accessing the 'group' prop passed from the parent component\n  const groupData = props.group;\n  const {\n    user\n  } = useContext(AuthContext);\n  const userEmail = user.email; // Assuming email is stored in user.email\n\n  // Extracting name from email\n  const currentUser = userEmail.split('@')[0];\n  console.log(\"in Group Page CURRENT USER\", currentUser);\n  // State to manage sticky notes\n  const [stickyNotes, setStickyNotes] = useState([]);\n\n  // Function to add a sticky note attached to a member\n  const addStickyNote = memberName => {\n    // Create a new sticky note object\n    debugger;\n    const newStickyNote = {\n      id: Date.now(),\n      // Unique ID for the sticky note\n      content: currentUser,\n      // Initial content of the sticky note\n      attachedTo: memberName // Member name to which the sticky note is attached\n    };\n\n    // Update the state to include the new sticky note\n    // setStickyNotes([...stickyNotes, newStickyNote]);\n    setStickyNotes(prevStickyNotes => [...prevStickyNotes, newStickyNote]);\n  };\n\n  // Function to update the content of a sticky note\n  const updateStickyNoteContent = (id, content) => {\n    // Find the sticky note by ID and update its content\n    const newContent = currentUser + ' - ' + content;\n    const updatedStickyNotes = stickyNotes.map(note => note.id === id ? {\n      ...note,\n      content: content\n    } : note);\n\n    // Update the state with the modified sticky note\n    setStickyNotes(updatedStickyNotes);\n  };\n\n  // Render the group data\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Group Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Group Name: \", groupData.groupName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Group Members\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), Array.isArray(groupData.members) && groupData.members.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyleType: 'none',\n        padding: 0\n      },\n      children: groupData.members.map((member, index) => {\n        let name = member.split('@');\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              cursor: 'pointer',\n              padding: '5px',\n              border: '4px solid black',\n              borderRadius: '5px',\n              marginBottom: '10px',\n              background: 'white'\n            },\n            onClick: () => addStickyNote(name[0], currentUser) // Attach sticky note to the member\n            ,\n            children: name[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 33\n          }, this), stickyNotes.map(note => {\n            if (note.attachedTo === name[0]) {\n              return /*#__PURE__*/_jsxDEV(StickyNote, {\n                id: note.id,\n                content: note.content,\n                onUpdateContent: updateStickyNoteContent,\n                style: {\n                  position: 'absolute',\n                  top: '100%',\n                  left: 0,\n                  zIndex: 1\n                }\n              }, note.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 45\n              }, this);\n            }\n            return null;\n          })]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No members found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(GroupPage, \"iPaA/uIfAL0OW4I81qlwgkSyps8=\");\n_c = GroupPage;\nexport default GroupPage;\nvar _c;\n$RefreshReg$(_c, \"GroupPage\");","map":{"version":3,"names":["React","useContext","useState","StickyNote","AuthContext","jsxDEV","_jsxDEV","GroupPage","props","_s","groupData","group","user","userEmail","email","currentUser","split","console","log","stickyNotes","setStickyNotes","addStickyNote","memberName","newStickyNote","id","Date","now","content","attachedTo","prevStickyNotes","updateStickyNoteContent","newContent","updatedStickyNotes","map","note","children","fileName","_jsxFileName","lineNumber","columnNumber","groupName","Array","isArray","members","length","style","listStyleType","padding","member","index","name","position","cursor","border","borderRadius","marginBottom","background","onClick","onUpdateContent","top","left","zIndex","_c","$RefreshReg$"],"sources":["/home/bahl/react FriendsHangout app/hangout-budget-app/src/component/GroupOptions/GroupPage.js"],"sourcesContent":["import React, { useContext ,useState } from 'react';\nimport StickyNote from '../StickyNote/StickyNote';\nimport { AuthContext } from './AuthContext.js';\nfunction GroupPage(props) {\n    // Accessing the 'group' prop passed from the parent component\n    const groupData = props.group;\n    const {user} = useContext(AuthContext);\n    const userEmail = user.email; // Assuming email is stored in user.email\n\n// Extracting name from email\nconst currentUser = userEmail.split('@')[0];\n\n    console.log(\"in Group Page CURRENT USER\",currentUser)\n    // State to manage sticky notes\n    const [stickyNotes, setStickyNotes] = useState([]);\n\n    // Function to add a sticky note attached to a member\n    const addStickyNote = (memberName) => {\n        // Create a new sticky note object\n        debugger\n        const newStickyNote = {\n            id: Date.now(), // Unique ID for the sticky note\n            content: currentUser,  // Initial content of the sticky note\n            attachedTo: memberName // Member name to which the sticky note is attached\n        };\n\n        // Update the state to include the new sticky note\n        // setStickyNotes([...stickyNotes, newStickyNote]);\n        setStickyNotes(prevStickyNotes => [...prevStickyNotes, newStickyNote]);\n    };\n\n    // Function to update the content of a sticky note\n    const updateStickyNoteContent = (id, content) => {\n        // Find the sticky note by ID and update its content\n        const newContent = currentUser + ' - ' + content;\n        const updatedStickyNotes = stickyNotes.map(note =>\n            note.id === id ? { ...note, content: content } : note\n        );\n\n        // Update the state with the modified sticky note\n        setStickyNotes(updatedStickyNotes);\n    };\n\n    // Render the group data\n    return (\n        <div>\n            <h2>Group Page</h2>\n            <p>Group Name: {groupData.groupName}</p>\n            <p>Group Members</p>\n            {Array.isArray(groupData.members) && groupData.members.length > 0 ? (\n                <ul style={{ listStyleType: 'none', padding: 0 }}>\n                    {groupData.members.map((member, index) => {\n                        let name = member.split('@');\n                        return (\n                            <div key={index} style={{ position: 'relative' }}>\n                                <li\n                                    style={{\n                                        cursor: 'pointer',\n                                        padding: '5px',\n                                        border: '4px solid black',\n                                        borderRadius: '5px',\n                                        marginBottom: '10px',\n                                        background: 'white'\n                                    }}\n                               \n                                    onClick={() => addStickyNote(name[0], currentUser)} // Attach sticky note to the member\n                                >\n                                    {name[0]}\n                                </li>\n                                {/* Render sticky notes attached to this member */}\n                                {stickyNotes.map(note => {\n                                    if (note.attachedTo === name[0]) {\n                                        return (\n                                            <StickyNote\n                                                key={note.id}\n                                                id={note.id}\n                                                content={note.content}\n                                                onUpdateContent={updateStickyNoteContent}\n                                                style={{\n                                                    position: 'absolute',\n                                                    top: '100%',\n                                                    left: 0,\n                                                    zIndex: 1\n                                                }}\n                                            />\n                                        );\n                                    }\n                                    return null;\n                                })}\n                            </div>\n                        );\n                    })}\n                </ul>\n            ) : (\n                <p>No members found</p>\n            )}\n        </div>\n    );\n}\n\nexport default GroupPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}