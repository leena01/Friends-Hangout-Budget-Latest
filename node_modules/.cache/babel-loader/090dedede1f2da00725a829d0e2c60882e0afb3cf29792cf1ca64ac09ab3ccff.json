{"ast":null,"code":"var _jsxFileName = \"/home/bahl/react FriendsHangout app/hangout-budget-app/src/component/GroupOptions/GroupPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport StickyNote from '../StickyNote/StickyNote';\nimport Folder from '../Folder/Folder';\nimport firebase from 'firebase/compat/app'; // Import Firebase\nimport 'firebase/compat/firestore'; // Import Firestore\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GroupPage(props) {\n  _s();\n  const groupData = props.group;\n  const [stickyNotes, setStickyNotes] = useState([]);\n  const db = firebase.firestore(); // Initialize Firestore\n\n  useEffect(() => {\n    const db = firebase.firestore();\n    // Fetch sticky notes from Firestore\n    const fetchStickyNotes = async () => {\n      try {\n        const snapshot = await db.collection('users').get();\n        const allNotes = [];\n        snapshot.forEach(doc => {\n          const notes = doc.data().stickyNotes;\n          allNotes.push(...notes);\n        });\n        setStickyNotes(allNotes);\n      } catch (error) {\n        console.error('Error fetching sticky notes:', error);\n      }\n    };\n    fetchStickyNotes();\n  }, []); // Run once on component mount\n  const addStickyNote = (memberName, id) => {\n    var _stickyNotes$find;\n    // Retrieve content based on the ID\n    const newStickyNoteContent = ((_stickyNotes$find = stickyNotes.find(note => note.id === id)) === null || _stickyNotes$find === void 0 ? void 0 : _stickyNotes$find.content) || '';\n    const newStickyNote = {\n      id: Date.now().toString(),\n      // Unique ID for the sticky note\n      content: newStickyNoteContent,\n      // Initial content of the sticky note\n      attachedTo: memberName,\n      // Associate the sticky note with the user\n      assignedBy: UserName\n    };\n    setStickyNotes(prevStickyNotes => [...prevStickyNotes, newStickyNote]);\n\n    // Add sticky note data to Firestore under the user's collection\n    db.collection('users').doc(memberName).collection('stickyNotes').doc(newStickyNote.id).set(newStickyNote).then(() => {\n      console.log('Sticky note added successfully');\n    }).catch(error => {\n      console.error('Error adding sticky note: ', error);\n    });\n  };\n  const updateStickyNoteContent = (id, content, memberName) => {\n    const updatedStickyNotes = stickyNotes.map(note => note.id === id ? {\n      ...note,\n      content: content\n    } : note);\n    setStickyNotes(updatedStickyNotes);\n\n    // Update sticky note content in Firestore\n    db.collection('users').doc(memberName).collection('stickyNotes').doc(id).update({\n      content: content\n    }).then(() => {\n      console.log('Sticky note content updated successfully');\n    }).catch(error => {\n      console.error('Error updating sticky note content: ', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Group Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Group Name: \", groupData.groupName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Group Members\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), Array.isArray(groupData.members) && groupData.members.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyleType: 'none',\n        padding: 0\n      },\n      children: groupData.members.map((member, index) => {\n        let name = member.split('@');\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              cursor: 'pointer',\n              padding: '5px',\n              border: '4px solid black',\n              borderRadius: '5px',\n              marginBottom: '10px',\n              background: 'white'\n            },\n            onClick: () => addStickyNote(name[0], Date.now().toString()) // Pass the member name to addStickyNote\n            ,\n            children: [name[0], /*#__PURE__*/_jsxDEV(Folder, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 33\n          }, this), stickyNotes.map(note => {\n            if (note.attachedTo === name[0]) {\n              return /*#__PURE__*/_jsxDEV(StickyNote, {\n                id: note.id,\n                content: note.content,\n                UserName: name[0] // Pass the userName from the GroupPage component\n                ,\n                onUpdateContent: (content, UserName) => updateStickyNoteContent(note.id, content, name[0], UserName) // Pass the member name\n                ,\n                style: {\n                  position: 'absolute',\n                  top: '100%',\n                  left: 0,\n                  zIndex: 1\n                }\n              }, note.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 45\n              }, this);\n            }\n            return null;\n          })]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No members found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n_s(GroupPage, \"GUijBdkenGHLDFOQcbfUl8bCJNM=\");\n_c = GroupPage;\nexport default GroupPage;\nvar _c;\n$RefreshReg$(_c, \"GroupPage\");","map":{"version":3,"names":["React","useState","useEffect","StickyNote","Folder","firebase","jsxDEV","_jsxDEV","GroupPage","props","_s","groupData","group","stickyNotes","setStickyNotes","db","firestore","fetchStickyNotes","snapshot","collection","get","allNotes","forEach","doc","notes","data","push","error","console","addStickyNote","memberName","id","_stickyNotes$find","newStickyNoteContent","find","note","content","newStickyNote","Date","now","toString","attachedTo","assignedBy","UserName","prevStickyNotes","set","then","log","catch","updateStickyNoteContent","updatedStickyNotes","map","update","children","fileName","_jsxFileName","lineNumber","columnNumber","groupName","Array","isArray","members","length","style","listStyleType","padding","member","index","name","split","position","cursor","border","borderRadius","marginBottom","background","onClick","onUpdateContent","top","left","zIndex","_c","$RefreshReg$"],"sources":["/home/bahl/react FriendsHangout app/hangout-budget-app/src/component/GroupOptions/GroupPage.js"],"sourcesContent":["import React, { useState,useEffect } from 'react';\nimport StickyNote from '../StickyNote/StickyNote';\nimport Folder from '../Folder/Folder';\nimport firebase from 'firebase/compat/app'; // Import Firebase\nimport 'firebase/compat/firestore'; // Import Firestore\n\nfunction GroupPage(props) {\n    const groupData = props.group;\n    const [stickyNotes, setStickyNotes] = useState([]);\n    const db = firebase.firestore(); // Initialize Firestore\n   \n    useEffect(() => {\n        const db = firebase.firestore();\n        // Fetch sticky notes from Firestore\n        const fetchStickyNotes = async () => {\n            try {\n                const snapshot = await db.collection('users').get();\n                const allNotes = [];\n                snapshot.forEach(doc => {\n                    const notes = doc.data().stickyNotes;\n                    allNotes.push(...notes);\n                });\n                setStickyNotes(allNotes);\n            } catch (error) {\n                console.error('Error fetching sticky notes:', error);\n            }\n        };\n        fetchStickyNotes();\n    }, []); // Run once on component mount\n    const addStickyNote = (memberName, id,) => {\n        // Retrieve content based on the ID\n        const newStickyNoteContent = stickyNotes.find(note => note.id === id)?.content || '';\n        const newStickyNote = {\n            id: Date.now().toString(), // Unique ID for the sticky note\n            content: newStickyNoteContent, // Initial content of the sticky note\n            attachedTo: memberName, // Associate the sticky note with the user\n            assignedBy:UserName\n        };\n\n        setStickyNotes(prevStickyNotes => [...prevStickyNotes, newStickyNote]);\n\n        // Add sticky note data to Firestore under the user's collection\n        db.collection('users').doc(memberName).collection('stickyNotes').doc(newStickyNote.id).set(newStickyNote)\n            .then(() => {\n                console.log('Sticky note added successfully');\n            })\n            .catch(error => {\n                console.error('Error adding sticky note: ', error);\n            });\n    };\n\n    const updateStickyNoteContent = (id, content, memberName) => {\n        const updatedStickyNotes = stickyNotes.map(note =>\n            note.id === id ? { ...note, content: content } : note\n        );\n\n        setStickyNotes(updatedStickyNotes);\n\n        // Update sticky note content in Firestore\n        db.collection('users').doc(memberName).collection('stickyNotes').doc(id).update({ content: content })\n            .then(() => {\n                console.log('Sticky note content updated successfully');\n            })\n            .catch(error => {\n                console.error('Error updating sticky note content: ', error);\n            });\n    };\n\n    return (\n        <div>\n            <h2>Group Page</h2>\n            <p>Group Name: {groupData.groupName}</p>\n            <p>Group Members</p>\n            {Array.isArray(groupData.members) && groupData.members.length > 0 ? (\n                <ul style={{ listStyleType: 'none', padding: 0 }}>\n                    {groupData.members.map((member, index) => {\n                        let name = member.split('@');\n                        return (\n                            <div key={index} style={{ position: 'relative' }}>\n                                <li\n                                    style={{\n                                        cursor: 'pointer',\n                                        padding: '5px',\n                                        border: '4px solid black',\n                                        borderRadius: '5px',\n                                        marginBottom: '10px',\n                                        background: 'white'\n                                    }}\n                                    onClick={() => addStickyNote(name[0], Date.now().toString())} // Pass the member name to addStickyNote\n                                >\n                                    {name[0]}\n                                    <Folder />\n                                </li>\n                                {/* Render sticky notes attached to this member */}\n                                \n                                {stickyNotes.map(note => {\n                                    if (note.attachedTo === name[0]) {\n                                        return (\n                                            <StickyNote\n                                                key={note.id}\n                                                id={note.id}\n                                                content={note.content}\n                                                UserName={name[0]} // Pass the userName from the GroupPage component\n                                                onUpdateContent={(content,UserName) => updateStickyNoteContent(note.id, content, name[0],UserName)} // Pass the member name\n                                                style={{\n                                                    position: 'absolute',\n                                                    top: '100%',\n                                                    left: 0,\n                                                    zIndex: 1\n                                                }}\n                                            />\n                                        );\n                                    }\n                                    return null;\n                                })}\n                            </div>\n                        );\n                    })}\n                </ul>\n            ) : (\n                <p>No members found</p>\n            )}\n        </div>\n    );\n}\n\nexport default GroupPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}