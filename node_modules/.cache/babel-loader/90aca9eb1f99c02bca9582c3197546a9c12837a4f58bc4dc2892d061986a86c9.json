{"ast":null,"code":"var _jsxFileName = \"/home/bahl/react FriendsHangout app/hangout-budget-app/src/component/GroupOptions/GroupPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport StickyNote from '../StickyNote/StickyNote';\nimport Folder from '../Folder/Folder';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/database'; // Import Firebase Realtime Database module\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GroupPage(props) {\n  _s();\n  const groupData = props.group;\n  const [stickyNotes, setStickyNotes] = useState([]);\n  const [selectedMember, setSelectedMember] = useState(null);\n\n  // Initialize Firebase database\n  useEffect(() => {\n    const database = firebase.database();\n    const currentUser = firebase.auth().currentUser; // Get the current authenticated user\n\n    if (currentUser) {\n      const userId = currentUser.uid;\n      const userRef = database.ref(`Users/${userId}/stickyNotes`);\n\n      // Fetch sticky notes for the current user from Firebase\n      userRef.on('value', snapshot => {\n        const notes = snapshot.val() || [];\n        setStickyNotes(notes);\n      });\n    }\n  }, []); // Run this effect only once when the component mounts\n\n  // Function to add a sticky note attached to a member\n  const addStickyNote = memberName => {\n    const newStickyNote = {\n      id: Date.now(),\n      content: '',\n      attachedTo: memberName\n    };\n    setStickyNotes(prevStickyNotes => [...prevStickyNotes, newStickyNote]);\n\n    // Update the sticky notes in Firebase\n    updateStickyNotesInFirebase([...stickyNotes, newStickyNote]);\n  };\n\n  // Function to update the content of a sticky note\n  const updateStickyNoteContent = (id, content) => {\n    const updatedStickyNotes = stickyNotes.map(note => note.id === id ? {\n      ...note,\n      content: content\n    } : note);\n    setStickyNotes(updatedStickyNotes);\n\n    // Update the sticky notes in Firebase\n    updateStickyNotesInFirebase(updatedStickyNotes);\n  };\n\n  // Function to update the sticky notes in Firebase\n  const updateStickyNotesInFirebase = notes => {\n    const currentUser = firebase.auth().currentUser;\n    if (currentUser) {\n      const userId = currentUser.uid;\n      const userRef = firebase.database().ref(`Users/${userId}/stickyNotes`);\n      userRef.set(notes);\n    }\n  };\n\n  // Function to handle viewing notes attached to a member\n  const onViewNotes = memberName => {\n    setSelectedMember(memberName);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Group Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Group Name: \", groupData.groupName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Group Members\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), Array.isArray(groupData.members) && groupData.members.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyleType: 'none',\n        padding: 0\n      },\n      children: groupData.members.map((member, index) => {\n        let name = member.split('@');\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'relative'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              cursor: 'pointer',\n              padding: '5px',\n              border: '4px solid black',\n              borderRadius: '5px',\n              marginBottom: '10px',\n              background: 'white'\n            },\n            onClick: () => addStickyNote(name[0]),\n            children: [name[0], /*#__PURE__*/_jsxDEV(Folder, {\n              memberName: name[0],\n              stickyNotes: stickyNotes,\n              onViewNotes: onViewNotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No members found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this), selectedMember && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Sticky Notes for \", selectedMember]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this), stickyNotes.map(note => {\n        if (note.attachedTo === selectedMember) {\n          return /*#__PURE__*/_jsxDEV(StickyNote, {\n            id: note.id,\n            content: note.content,\n            onUpdateContent: updateStickyNoteContent\n          }, note.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 33\n          }, this);\n        }\n        return null;\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(GroupPage, \"C0zRonbMK5HNIMCUTgrax29s1+U=\");\n_c = GroupPage;\nexport default GroupPage;\nvar _c;\n$RefreshReg$(_c, \"GroupPage\");","map":{"version":3,"names":["React","useState","useEffect","StickyNote","Folder","firebase","jsxDEV","_jsxDEV","GroupPage","props","_s","groupData","group","stickyNotes","setStickyNotes","selectedMember","setSelectedMember","database","currentUser","auth","userId","uid","userRef","ref","on","snapshot","notes","val","addStickyNote","memberName","newStickyNote","id","Date","now","content","attachedTo","prevStickyNotes","updateStickyNotesInFirebase","updateStickyNoteContent","updatedStickyNotes","map","note","set","onViewNotes","children","fileName","_jsxFileName","lineNumber","columnNumber","groupName","Array","isArray","members","length","style","listStyleType","padding","member","index","name","split","position","cursor","border","borderRadius","marginBottom","background","onClick","onUpdateContent","_c","$RefreshReg$"],"sources":["/home/bahl/react FriendsHangout app/hangout-budget-app/src/component/GroupOptions/GroupPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport StickyNote from '../StickyNote/StickyNote';\nimport Folder from '../Folder/Folder';\nimport firebase from 'firebase/compat/app';\n\nimport 'firebase/database'; // Import Firebase Realtime Database module\n\nfunction GroupPage(props) {\n    const groupData = props.group;\n    const [stickyNotes, setStickyNotes] = useState([]);\n    const [selectedMember, setSelectedMember] = useState(null);\n\n    // Initialize Firebase database\n    useEffect(() => {\n        const database = firebase.database();\n        const currentUser = firebase.auth().currentUser; // Get the current authenticated user\n\n        if (currentUser) {\n            const userId = currentUser.uid;\n            const userRef = database.ref(`Users/${userId}/stickyNotes`);\n\n            // Fetch sticky notes for the current user from Firebase\n            userRef.on('value', (snapshot) => {\n                const notes = snapshot.val() || [];\n                setStickyNotes(notes);\n            });\n        }\n    }, []); // Run this effect only once when the component mounts\n\n    // Function to add a sticky note attached to a member\n    const addStickyNote = (memberName) => {\n        const newStickyNote = {\n            id: Date.now(),\n            content: '',\n            attachedTo: memberName\n        };\n\n        setStickyNotes(prevStickyNotes => [...prevStickyNotes, newStickyNote]);\n\n        // Update the sticky notes in Firebase\n        updateStickyNotesInFirebase([...stickyNotes, newStickyNote]);\n    };\n\n    // Function to update the content of a sticky note\n    const updateStickyNoteContent = (id, content) => {\n        const updatedStickyNotes = stickyNotes.map(note =>\n            note.id === id ? { ...note, content: content } : note\n        );\n\n        setStickyNotes(updatedStickyNotes);\n\n        // Update the sticky notes in Firebase\n        updateStickyNotesInFirebase(updatedStickyNotes);\n    };\n\n    // Function to update the sticky notes in Firebase\n    const updateStickyNotesInFirebase = (notes) => {\n        const currentUser = firebase.auth().currentUser;\n\n        if (currentUser) {\n            const userId = currentUser.uid;\n            const userRef = firebase.database().ref(`Users/${userId}/stickyNotes`);\n            userRef.set(notes);\n        }\n    };\n\n    // Function to handle viewing notes attached to a member\n    const onViewNotes = (memberName) => {\n        setSelectedMember(memberName);\n    };\n\n    return (\n        <div>\n            <h2>Group Page</h2>\n            <p>Group Name: {groupData.groupName}</p>\n            <p>Group Members</p>\n            {Array.isArray(groupData.members) && groupData.members.length > 0 ? (\n                <ul style={{ listStyleType: 'none', padding: 0 }}>\n                    {groupData.members.map((member, index) => {\n                        let name = member.split('@');\n                        return (\n                            <div key={index} style={{ position: 'relative' }}>\n                                <li\n                                    style={{\n                                        cursor: 'pointer',\n                                        padding: '5px',\n                                        border: '4px solid black',\n                                        borderRadius: '5px',\n                                        marginBottom: '10px',\n                                        background: 'white'\n                                    }}\n                                    onClick={() => addStickyNote(name[0])}\n                                >\n                                    {name[0]}\n                                    <Folder\n                                        memberName={name[0]}\n                                        stickyNotes={stickyNotes}\n                                        onViewNotes={onViewNotes}\n                                    />\n                                </li>\n                            </div>\n                        );\n                    })}\n                </ul>\n            ) : (\n                <p>No members found</p>\n            )}\n\n            {/* Display sticky notes if a member's notes are selected */}\n            {selectedMember && (\n                <div>\n                    <h3>Sticky Notes for {selectedMember}</h3>\n                    {stickyNotes.map(note => {\n                        if (note.attachedTo === selectedMember) {\n                            return (\n                                <StickyNote\n                                    key={note.id}\n                                    id={note.id}\n                                    content={note.content}\n                                    onUpdateContent={updateStickyNoteContent}\n                                />\n                            );\n                        }\n                        return null;\n                    })}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default GroupPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}