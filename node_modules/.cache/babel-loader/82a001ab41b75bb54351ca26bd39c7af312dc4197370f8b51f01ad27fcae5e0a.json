{"ast":null,"code":"var _s = $RefreshSig$();\nfunction GroupPage(props) {\n  _s();\n  const groupData = props.group;\n  const [stickyNotes, setStickyNotes] = useState([]);\n  const db = firebase.firestore(); // Initialize Firestore\n\n  const addStickyNote = (memberName, id) => {\n    var _stickyNotes$find;\n    // Retrieve content based on the ID\n    const newStickyNoteContent = ((_stickyNotes$find = stickyNotes.find(note => note.id === id)) === null || _stickyNotes$find === void 0 ? void 0 : _stickyNotes$find.content) || '';\n    const newStickyNote = {\n      id: Date.now().toString(),\n      // Unique ID for the sticky note\n      content: newStickyNoteContent,\n      // Initial content of the sticky note\n      attachedTo: memberName // Associate the sticky note with the user\n    };\n    setStickyNotes(prevStickyNotes => [...prevStickyNotes, newStickyNote]);\n\n    // Add sticky note data to Firestore under the user's collection\n    db.collection('users').doc(memberName).collection('stickyNotes').doc(newStickyNote.id).set(newStickyNote).then(() => {\n      console.log('Sticky note added successfully');\n    }).catch(error => {\n      console.error('Error adding sticky note: ', error);\n    });\n  };\n  const updateStickyNoteContent = (id, content, memberName) => {\n    const updatedStickyNotes = stickyNotes.map(note => note.id === id ? {\n      ...note,\n      content: content\n    } : note);\n    setStickyNotes(updatedStickyNotes);\n\n    // Update sticky note content in Firestore\n    db.collection('users').doc(memberName).collection('stickyNotes').doc(id).update({\n      content: content\n    }).then(() => {\n      console.log('Sticky note content updated successfully');\n    }).catch(error => {\n      console.error('Error updating sticky note content: ', error);\n    });\n  };\n\n  // Rest of your code remains unchanged...\n}\n_s(GroupPage, \"9IOQIjTfNxsvYZLSJohTZebx/20=\");\n_c = GroupPage;\nvar _c;\n$RefreshReg$(_c, \"GroupPage\");","map":{"version":3,"names":["GroupPage","props","_s","groupData","group","stickyNotes","setStickyNotes","useState","db","firebase","firestore","addStickyNote","memberName","id","_stickyNotes$find","newStickyNoteContent","find","note","content","newStickyNote","Date","now","toString","attachedTo","prevStickyNotes","collection","doc","set","then","console","log","catch","error","updateStickyNoteContent","updatedStickyNotes","map","update","_c","$RefreshReg$"],"sources":["/home/bahl/react FriendsHangout app/hangout-budget-app/src/component/GroupOptions/GroupPage.js"],"sourcesContent":["function GroupPage(props) {\n    const groupData = props.group;\n    const [stickyNotes, setStickyNotes] = useState([]);\n    const db = firebase.firestore(); // Initialize Firestore\n   \n    const addStickyNote = (memberName, id) => {\n        // Retrieve content based on the ID\n        const newStickyNoteContent = stickyNotes.find(note => note.id === id)?.content || '';\n        const newStickyNote = {\n            id: Date.now().toString(), // Unique ID for the sticky note\n            content: newStickyNoteContent, // Initial content of the sticky note\n            attachedTo: memberName // Associate the sticky note with the user\n        };\n\n        setStickyNotes(prevStickyNotes => [...prevStickyNotes, newStickyNote]);\n\n        // Add sticky note data to Firestore under the user's collection\n        db.collection('users').doc(memberName).collection('stickyNotes').doc(newStickyNote.id).set(newStickyNote)\n            .then(() => {\n                console.log('Sticky note added successfully');\n            })\n            .catch(error => {\n                console.error('Error adding sticky note: ', error);\n            });\n    };\n\n    const updateStickyNoteContent = (id, content, memberName) => {\n        const updatedStickyNotes = stickyNotes.map(note =>\n            note.id === id ? { ...note, content: content } : note\n        );\n\n        setStickyNotes(updatedStickyNotes);\n\n        // Update sticky note content in Firestore\n        db.collection('users').doc(memberName).collection('stickyNotes').doc(id).update({ content: content })\n            .then(() => {\n                console.log('Sticky note content updated successfully');\n            })\n            .catch(error => {\n                console.error('Error updating sticky note content: ', error);\n            });\n    };\n\n    // Rest of your code remains unchanged...\n}\n"],"mappings":";AAAA,SAASA,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACtB,MAAMC,SAAS,GAAGF,KAAK,CAACG,KAAK;EAC7B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAMC,EAAE,GAAGC,QAAQ,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjC,MAAMC,aAAa,GAAGA,CAACC,UAAU,EAAEC,EAAE,KAAK;IAAA,IAAAC,iBAAA;IACtC;IACA,MAAMC,oBAAoB,GAAG,EAAAD,iBAAA,GAAAT,WAAW,CAACW,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACJ,EAAE,KAAKA,EAAE,CAAC,cAAAC,iBAAA,uBAAxCA,iBAAA,CAA0CI,OAAO,KAAI,EAAE;IACpF,MAAMC,aAAa,GAAG;MAClBN,EAAE,EAAEO,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MAAE;MAC3BJ,OAAO,EAAEH,oBAAoB;MAAE;MAC/BQ,UAAU,EAAEX,UAAU,CAAC;IAC3B,CAAC;IAEDN,cAAc,CAACkB,eAAe,IAAI,CAAC,GAAGA,eAAe,EAAEL,aAAa,CAAC,CAAC;;IAEtE;IACAX,EAAE,CAACiB,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACd,UAAU,CAAC,CAACa,UAAU,CAAC,aAAa,CAAC,CAACC,GAAG,CAACP,aAAa,CAACN,EAAE,CAAC,CAACc,GAAG,CAACR,aAAa,CAAC,CACpGS,IAAI,CAAC,MAAM;MACRC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IACjD,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACtD,CAAC,CAAC;EACV,CAAC;EAED,MAAMC,uBAAuB,GAAGA,CAACpB,EAAE,EAAEK,OAAO,EAAEN,UAAU,KAAK;IACzD,MAAMsB,kBAAkB,GAAG7B,WAAW,CAAC8B,GAAG,CAAClB,IAAI,IAC3CA,IAAI,CAACJ,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGI,IAAI;MAAEC,OAAO,EAAEA;IAAQ,CAAC,GAAGD,IACrD,CAAC;IAEDX,cAAc,CAAC4B,kBAAkB,CAAC;;IAElC;IACA1B,EAAE,CAACiB,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACd,UAAU,CAAC,CAACa,UAAU,CAAC,aAAa,CAAC,CAACC,GAAG,CAACb,EAAE,CAAC,CAACuB,MAAM,CAAC;MAAElB,OAAO,EAAEA;IAAQ,CAAC,CAAC,CAChGU,IAAI,CAAC,MAAM;MACRC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IAC3D,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZH,OAAO,CAACG,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAChE,CAAC,CAAC;EACV,CAAC;;EAED;AACJ;AAAC9B,EAAA,CA5CQF,SAAS;AAAAqC,EAAA,GAATrC,SAAS;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}